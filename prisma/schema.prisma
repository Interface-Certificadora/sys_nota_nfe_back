generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  senha     String
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Client {
  id              Int           @id @default(autoincrement())
  cliente         String
  fantasia        String?
  cnpj            String        @unique
  ie              String
  razaoSocial     String
  telefone        String?
  whatsapp        Boolean       @default(false)
  telefone2       String?
  whatsapp2       Boolean       @default(false)
  email           String?
  user            String
  password        String
  logo            String?
  ultimanota      String?
  serie           String?
  vctoCd          DateTime?
  valor           Float
  plano           String
  situacao        String?
  simples         Boolean?      @default(true)
  status          Boolean      @default(true)
  dominio         String
  contador        String
  tel_contador    String?
  whatsapp_cont   Boolean       @default(false)
  endereco        String?
  bairro          String?
  cidade          String?
  uf              String?
  cep             String?
  complemento     String?
  numero          String?
  fechamento      Int?          @default(10)
  teste           Int?          @default(10)
  vctoPlano       DateTime?
  sefaz           Boolean?      @default(false)
  justificativa   String?
  certificado     String?
  key_certificado String?
  parceiro_id     Int?
  parceiro        Parceiros?    @relation(fields: [parceiro_id], references: [id], onDelete: SetNull)
  certificates    certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Um cliente pode ter várias cobranças
  cobrancas Cobranca[]
  RelatSms RelatSms[]
}

model Leads {
  id          Int       @id @default(autoincrement())
  cliente     String
  fantasia    String?
  cnpj        String
  ie          String?
  razaoSocial String
  contador    String?
  telefone    String?
  whatsapp    Boolean   @default(false)
  telefone2   String?
  whatsapp2   Boolean   @default(false)
  email       String?
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Parceiros {
  id        Int         @id @default(autoincrement())
  nome      String
  cpf       String      @unique
  chave_pix String?
  banco     String?
  telefone  String?
  whatsapp  Boolean     @default(false)
  email     String?
  valor     Float
  clientes  Client[]
  status    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  Pagamento Pagamento[]
}

model Cobranca {
  id          Int       @id @default(autoincrement())
  cliente_id  Int
  valor       Float
  venc        String
  current     String
  status      Boolean   @default(false)
  obs         String?
  link_boleto String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  //cada cobrança vai ter um cliente
  cliente     Client    @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
}

model Pagamento {
  id          Int       @id @default(autoincrement())
  parceiro_id Int
  valor       Float
  venc        String
  current     String
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt()

  parceiro Parceiros @relation(fields: [parceiro_id], references: [id], onDelete: Cascade)
}

model certificate {
  id           String   @id @default(uuid())
  url          String?
  password     String?
  validade     String?
  fieldname    String?
  originalname String?
  encoding     String?
  mimetype     String?
  destination  String?
  filename     String?
  path         String?
  size         Int?
  clientId     Int
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Um certificado pertence a um cliente
  Client Client @relation(fields: [clientId], references: [id])
}

model RelatSms {
  id          Int       @id @default(autoincrement())
  telefone    String?
  cliente_id  Int
  mensagem   String?
  error_message Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt()
  //Um relato de SMS pertence a um cliente
  Client Client @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
}